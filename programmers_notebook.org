#+TITLE: Programmers notebook
This is my notebook that accumulates my knowledge, hacks, links, posts, books. It is provided "as is", without warranty of any kind.
* Library
** Nix
*** TODO [[https://medium.com/@MrJamesFisher/nix-by-example-a0063a1a4c55][Nix by Example by James Fisher]]                      :nix:expression:
Blog post about Nix expression language.
*** [[https://nixos.org/manual/nix/stable/][Nix Package Manager Guide]]                                           :nix:
** Haskell
*** [[https://www.youtube.com/watch?v=t9pxo7L8mS0][An Intuition for List Folds by Tony Morris (video)]]
In this presentation Tony gives a simple intuition to understanding both left and right folds of lists. Left fold as a loop over a collection, right fold as replacement for cons and nil.
*** [[http://takenobu-hs.github.io/downloads/haskell_ghc_illustrated.pdf][GHC(STG,Cmm,asm) illustrated]]                              :ghc:internals:
This is gold! Massive, constantly updated presentation about memory layout, memory alloation, Core, STG, Cmm and assembly. This is a go to document when trying to understand how GHC works under the hood.
*** [[https://www.youtube.com/watch?v=7t6wt7ByBWg][Edsko de Vries - Being lazy without being bloated]]         :ghc:internals:
In this talk Edsko is showing his tool NoThunk that allows to narrow down thunks that could potentially cause memory leaks. It is also a good introduction for anyone willing to understand how memory leaks can occur in GHC.
*** [[https://www.youtube.com/watch?v=vvLDerKtUWE][Maxim Koltsov â€“ Introduction to Haskell execution and garbage collection internals]] :ghc:internals:
Nice introduction to memory allocation, garbage collection in GHC
*** [[https://ocharles.org.uk/pages/2014-12-01-24-days-of-ghc-extensions.html][24 days of extensions]]                                    :ghc:extensions:
A collection of blog posts about different GHC extensions
** Hakyll
*** TODO [[https://geekplace.eu/flow/posts/2014-08-17-embedding-discourse-into-hakyll.html][Embeding discourse into haskell]]
*** TODO [[https://cs-syd.eu/posts/2016-06-05-estimated-reading-time-in-hakyll][Estimated reading time in Hakyll]]
*** TODO [[https://lunrjs.com/guides/index_prebuilding.html][Potential tool to provide search capabilities in Hakyll]]
*** TODO [[https://javran.github.io/posts/2014-03-01-add-tags-to-your-hakyll-blog.html][How to add tags in Hakyll]]
*** [[https://github.com/tejasbubane/hakyll-css][Different CSS for code syntax highlighting]]
** Emacs
*** Other peoples' configuration found on web
**** [[https://ivanmalison.github.io/dotfiles/][ivanmalison]]
**** [[https://matthewbauer.us/bauer/][bauer]]
** Cryptography
*** TODO [[https://fangpenlin.com/posts/2019/10/07/elliptic-curve-cryptography-explained/][Elliptic Curve Cryptography Explained]]
** Raspberry Pi
*** TODO [[https://www.futurelearn.com/courses/robotics-with-raspberry-pi][Robotics With Raspberry Pi]]
Free online course about robotics
* How-to
In How-to section I keep all my little and bigger how-tos. Being sick and tired of constantly googling for the same hacks, I started keeping them in one place for reference.
** Emacs
*** writing modes
**** [[http://ergoemacs.org/emacs/elisp_define_face.html][Emacs Lisp How to Write Major Mode]]
*** org-mode
**** TODO How to wrap lines
This should become part of my org-hydra so I don't have to come back to this hack.
#+BEGIN_SRC
M-x toggle-truncate-lines
#+END_SRC
*** How to add title to document
#+BEGIN_SRC
#+TITLE: This is the title of the document
#+END_SRC
** Command line tools
*** curl
**** How to POST a JSON
#+BEGIN_SRC
curl -d 'JSON_HERE' -H "Content-Type: application/json" -X POST http://localhost:3000/data
#+END_SRC
*** other
**** How to get current date minus X minutes
#+BEGIN_SRC
date -v-60M
#+END_SRC
** Scala
*** ScalaTest
**** How to run a single test by name
#+BEGIN_SRC
sbt testOnly *TEST_FILE_NAME -- -z "TEST_NAME"
#+END_SRC
** Git
*** How to change commit date
While rebasing, edit commit you want to change date of and then either

#+BEGIN_SRC
GIT_COMMITTER_DATE="$(date)" git commit --amend --no-edit --date "$(date)"
#+END_SRC

or

#+BEGIN_SRC
GIT_COMMITTER_DATE="Mon 20 Aug 2018 20:19:19 BST" git commit --amend --no-edit --date "Mon 20 Aug 2018 20:19:19 BST"
#+END_SRC
